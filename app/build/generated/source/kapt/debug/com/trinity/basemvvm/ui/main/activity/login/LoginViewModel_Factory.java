// Generated by Dagger (https://dagger.dev).
package com.trinity.basemvvm.ui.main.activity.login;

import com.trinity.basemvvm.data.local.AppDatabase;
import com.trinity.basemvvm.data.remote.InteractCommon;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import java.util.concurrent.Executor;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class LoginViewModel_Factory implements Factory<LoginViewModel> {
  private final Provider<AppDatabase> appDatabaseProvider;

  private final Provider<InteractCommon> interactCommonProvider;

  private final Provider<Executor> schedulerProvider;

  public LoginViewModel_Factory(Provider<AppDatabase> appDatabaseProvider,
      Provider<InteractCommon> interactCommonProvider, Provider<Executor> schedulerProvider) {
    this.appDatabaseProvider = appDatabaseProvider;
    this.interactCommonProvider = interactCommonProvider;
    this.schedulerProvider = schedulerProvider;
  }

  @Override
  public LoginViewModel get() {
    return newInstance(appDatabaseProvider.get(), interactCommonProvider.get(), schedulerProvider.get());
  }

  public static LoginViewModel_Factory create(Provider<AppDatabase> appDatabaseProvider,
      Provider<InteractCommon> interactCommonProvider, Provider<Executor> schedulerProvider) {
    return new LoginViewModel_Factory(appDatabaseProvider, interactCommonProvider, schedulerProvider);
  }

  public static LoginViewModel newInstance(AppDatabase appDatabase, InteractCommon interactCommon,
      Executor scheduler) {
    return new LoginViewModel(appDatabase, interactCommon, scheduler);
  }
}
