// Generated by Dagger (https://dagger.dev).
package com.trinity.basemvvm.ui.base.fragment;

import androidx.lifecycle.ViewModelProvider;
import com.trinity.basemvvm.ui.base.callback.BaseCallBack;
import com.trinity.basemvvm.ui.base.viewmodel.BaseViewModel;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class BaseMvvmFragment_MembersInjector<CallBack extends BaseCallBack, Model extends BaseViewModel<CallBack>> implements MembersInjector<BaseMvvmFragment<CallBack, Model>> {
  private final Provider<ViewModelProvider.Factory> viewModelFactoryProvider;

  public BaseMvvmFragment_MembersInjector(
      Provider<ViewModelProvider.Factory> viewModelFactoryProvider) {
    this.viewModelFactoryProvider = viewModelFactoryProvider;
  }

  public static <CallBack extends BaseCallBack, Model extends BaseViewModel<CallBack>> MembersInjector<BaseMvvmFragment<CallBack, Model>> create(
      Provider<ViewModelProvider.Factory> viewModelFactoryProvider) {
    return new BaseMvvmFragment_MembersInjector<CallBack, Model>(viewModelFactoryProvider);
  }

  @Override
  public void injectMembers(BaseMvvmFragment<CallBack, Model> instance) {
    injectViewModelFactory(instance, viewModelFactoryProvider.get());
  }

  @InjectedFieldSignature("com.trinity.basemvvm.ui.base.fragment.BaseMvvmFragment.viewModelFactory")
  public static <CallBack extends BaseCallBack, Model extends BaseViewModel<CallBack>> void injectViewModelFactory(
      BaseMvvmFragment<CallBack, Model> instance, ViewModelProvider.Factory viewModelFactory) {
    instance.viewModelFactory = viewModelFactory;
  }
}
