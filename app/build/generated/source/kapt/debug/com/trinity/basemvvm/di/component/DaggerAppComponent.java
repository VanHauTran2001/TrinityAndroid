// Generated by Dagger (https://dagger.dev).
package com.trinity.basemvvm.di.component;

import android.app.Application;
import android.content.Context;
import androidx.lifecycle.ViewModel;
import com.trinity.basemvvm.common.MVVMApplication;
import com.trinity.basemvvm.common.MVVMApplication_MembersInjector;
import com.trinity.basemvvm.data.local.AppDatabase;
import com.trinity.basemvvm.data.remote.InteractCommon;
import com.trinity.basemvvm.di.builder.ActivityBuilderModule_ContributeHomeActivity;
import com.trinity.basemvvm.di.builder.ActivityBuilderModule_ContributeLoginActivity;
import com.trinity.basemvvm.di.builder.ActivityBuilderModule_ContributeSplashActivity;
import com.trinity.basemvvm.di.builder.FragmentBuilderModule_ContributeCheckRegisterFragment;
import com.trinity.basemvvm.di.builder.FragmentBuilderModule_ContributeSignINFragment;
import com.trinity.basemvvm.di.builder.FragmentBuilderModule_ContributeSignupFragment;
import com.trinity.basemvvm.di.builder.FragmentBuilderModule_ContributeUserFragment;
import com.trinity.basemvvm.di.model.AppModel;
import com.trinity.basemvvm.di.model.AppModel_ProvideAppDatabase$app_debugFactory;
import com.trinity.basemvvm.di.model.AppModel_ProvideContext$app_debugFactory;
import com.trinity.basemvvm.di.model.AppModel_ProvideInteractCommon$app_debugFactory;
import com.trinity.basemvvm.di.model.AppModel_ProvideSchedule$app_debugFactory;
import com.trinity.basemvvm.di.model.ViewModelFactory;
import com.trinity.basemvvm.di.model.ViewModelFactory_Factory;
import com.trinity.basemvvm.ui.base.activity.BaseMVVMActivity_MembersInjector;
import com.trinity.basemvvm.ui.base.fragment.BaseMvvmFragment_MembersInjector;
import com.trinity.basemvvm.ui.main.activity.home.HomeAcitivty;
import com.trinity.basemvvm.ui.main.activity.home.HomeViewModel;
import com.trinity.basemvvm.ui.main.activity.home.HomeViewModel_Factory;
import com.trinity.basemvvm.ui.main.activity.login.LoginActivity;
import com.trinity.basemvvm.ui.main.activity.login.LoginViewModel;
import com.trinity.basemvvm.ui.main.activity.login.LoginViewModel_Factory;
import com.trinity.basemvvm.ui.main.activity.splash.SplashActivity;
import com.trinity.basemvvm.ui.main.activity.splash.SplashViewModel;
import com.trinity.basemvvm.ui.main.activity.splash.SplashViewModel_Factory;
import com.trinity.basemvvm.ui.main.fragment.check_register.CheckRegisterFragment;
import com.trinity.basemvvm.ui.main.fragment.check_register.CheckRegisterViewModel;
import com.trinity.basemvvm.ui.main.fragment.check_register.CheckRegisterViewModel_Factory;
import com.trinity.basemvvm.ui.main.fragment.signin.SigninFragment;
import com.trinity.basemvvm.ui.main.fragment.signin.SigninViewModel;
import com.trinity.basemvvm.ui.main.fragment.signin.SigninViewModel_Factory;
import com.trinity.basemvvm.ui.main.fragment.signup.SignupFragment;
import com.trinity.basemvvm.ui.main.fragment.signup.SignupViewModel;
import com.trinity.basemvvm.ui.main.fragment.signup.SignupViewModel_Factory;
import com.trinity.basemvvm.ui.main.fragment.user.UserFragment;
import com.trinity.basemvvm.ui.main.fragment.user.UserViewModel;
import com.trinity.basemvvm.ui.main.fragment.user.UserViewModel_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import java.util.concurrent.Executor;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final DaggerAppComponent appComponent = this;

  private Provider<ActivityBuilderModule_ContributeLoginActivity.LoginActivitySubcomponent.Factory> loginActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilderModule_ContributeSplashActivity.SplashActivitySubcomponent.Factory> splashActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilderModule_ContributeHomeActivity.HomeAcitivtySubcomponent.Factory> homeAcitivtySubcomponentFactoryProvider;

  private Provider<FragmentBuilderModule_ContributeUserFragment.UserFragmentSubcomponent.Factory> userFragmentSubcomponentFactoryProvider;

  private Provider<FragmentBuilderModule_ContributeSignupFragment.SignupFragmentSubcomponent.Factory> signupFragmentSubcomponentFactoryProvider;

  private Provider<FragmentBuilderModule_ContributeSignINFragment.SigninFragmentSubcomponent.Factory> signinFragmentSubcomponentFactoryProvider;

  private Provider<FragmentBuilderModule_ContributeCheckRegisterFragment.CheckRegisterFragmentSubcomponent.Factory> checkRegisterFragmentSubcomponentFactoryProvider;

  private Provider<Application> applicationProvider;

  private Provider<Context> provideContext$app_debugProvider;

  private Provider<AppDatabase> provideAppDatabase$app_debugProvider;

  private Provider<InteractCommon> provideInteractCommon$app_debugProvider;

  private Provider<Executor> provideSchedule$app_debugProvider;

  private Provider<LoginViewModel> loginViewModelProvider;

  private Provider<SplashViewModel> splashViewModelProvider;

  private Provider<HomeViewModel> homeViewModelProvider;

  private Provider<UserViewModel> userViewModelProvider;

  private Provider<SignupViewModel> signupViewModelProvider;

  private Provider<SigninViewModel> signinViewModelProvider;

  private Provider<CheckRegisterViewModel> checkRegisterViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerAppComponent(AppModel appModelParam, Application applicationParam) {

    initialize(appModelParam, applicationParam);

  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(7).put(LoginActivity.class, ((Provider) loginActivitySubcomponentFactoryProvider)).put(SplashActivity.class, ((Provider) splashActivitySubcomponentFactoryProvider)).put(HomeAcitivty.class, ((Provider) homeAcitivtySubcomponentFactoryProvider)).put(UserFragment.class, ((Provider) userFragmentSubcomponentFactoryProvider)).put(SignupFragment.class, ((Provider) signupFragmentSubcomponentFactoryProvider)).put(SigninFragment.class, ((Provider) signinFragmentSubcomponentFactoryProvider)).put(CheckRegisterFragment.class, ((Provider) checkRegisterFragmentSubcomponentFactoryProvider)).build();
  }

  private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppModel appModelParam, final Application applicationParam) {
    this.loginActivitySubcomponentFactoryProvider = new Provider<ActivityBuilderModule_ContributeLoginActivity.LoginActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_ContributeLoginActivity.LoginActivitySubcomponent.Factory get() {
        return new LoginActivitySubcomponentFactory(appComponent);
      }
    };
    this.splashActivitySubcomponentFactoryProvider = new Provider<ActivityBuilderModule_ContributeSplashActivity.SplashActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_ContributeSplashActivity.SplashActivitySubcomponent.Factory get(
          ) {
        return new SplashActivitySubcomponentFactory(appComponent);
      }
    };
    this.homeAcitivtySubcomponentFactoryProvider = new Provider<ActivityBuilderModule_ContributeHomeActivity.HomeAcitivtySubcomponent.Factory>() {
      @Override
      public ActivityBuilderModule_ContributeHomeActivity.HomeAcitivtySubcomponent.Factory get() {
        return new HomeAcitivtySubcomponentFactory(appComponent);
      }
    };
    this.userFragmentSubcomponentFactoryProvider = new Provider<FragmentBuilderModule_ContributeUserFragment.UserFragmentSubcomponent.Factory>() {
      @Override
      public FragmentBuilderModule_ContributeUserFragment.UserFragmentSubcomponent.Factory get() {
        return new UserFragmentSubcomponentFactory(appComponent);
      }
    };
    this.signupFragmentSubcomponentFactoryProvider = new Provider<FragmentBuilderModule_ContributeSignupFragment.SignupFragmentSubcomponent.Factory>() {
      @Override
      public FragmentBuilderModule_ContributeSignupFragment.SignupFragmentSubcomponent.Factory get(
          ) {
        return new SignupFragmentSubcomponentFactory(appComponent);
      }
    };
    this.signinFragmentSubcomponentFactoryProvider = new Provider<FragmentBuilderModule_ContributeSignINFragment.SigninFragmentSubcomponent.Factory>() {
      @Override
      public FragmentBuilderModule_ContributeSignINFragment.SigninFragmentSubcomponent.Factory get(
          ) {
        return new SigninFragmentSubcomponentFactory(appComponent);
      }
    };
    this.checkRegisterFragmentSubcomponentFactoryProvider = new Provider<FragmentBuilderModule_ContributeCheckRegisterFragment.CheckRegisterFragmentSubcomponent.Factory>() {
      @Override
      public FragmentBuilderModule_ContributeCheckRegisterFragment.CheckRegisterFragmentSubcomponent.Factory get(
          ) {
        return new CheckRegisterFragmentSubcomponentFactory(appComponent);
      }
    };
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideContext$app_debugProvider = DoubleCheck.provider(AppModel_ProvideContext$app_debugFactory.create(appModelParam, applicationProvider));
    this.provideAppDatabase$app_debugProvider = DoubleCheck.provider(AppModel_ProvideAppDatabase$app_debugFactory.create(appModelParam, applicationProvider));
    this.provideInteractCommon$app_debugProvider = DoubleCheck.provider(AppModel_ProvideInteractCommon$app_debugFactory.create(appModelParam));
    this.provideSchedule$app_debugProvider = DoubleCheck.provider(AppModel_ProvideSchedule$app_debugFactory.create(appModelParam));
    this.loginViewModelProvider = LoginViewModel_Factory.create(provideAppDatabase$app_debugProvider, provideInteractCommon$app_debugProvider, provideSchedule$app_debugProvider);
    this.splashViewModelProvider = SplashViewModel_Factory.create(provideAppDatabase$app_debugProvider, provideInteractCommon$app_debugProvider, provideSchedule$app_debugProvider);
    this.homeViewModelProvider = HomeViewModel_Factory.create(provideAppDatabase$app_debugProvider, provideInteractCommon$app_debugProvider, provideSchedule$app_debugProvider);
    this.userViewModelProvider = UserViewModel_Factory.create(provideAppDatabase$app_debugProvider, provideInteractCommon$app_debugProvider, provideSchedule$app_debugProvider);
    this.signupViewModelProvider = SignupViewModel_Factory.create(provideAppDatabase$app_debugProvider, provideInteractCommon$app_debugProvider, provideSchedule$app_debugProvider);
    this.signinViewModelProvider = SigninViewModel_Factory.create(provideAppDatabase$app_debugProvider, provideInteractCommon$app_debugProvider, provideSchedule$app_debugProvider);
    this.checkRegisterViewModelProvider = CheckRegisterViewModel_Factory.create(provideAppDatabase$app_debugProvider, provideInteractCommon$app_debugProvider, provideSchedule$app_debugProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(7).put(LoginViewModel.class, ((Provider) loginViewModelProvider)).put(SplashViewModel.class, ((Provider) splashViewModelProvider)).put(HomeViewModel.class, ((Provider) homeViewModelProvider)).put(UserViewModel.class, ((Provider) userViewModelProvider)).put(SignupViewModel.class, ((Provider) signupViewModelProvider)).put(SigninViewModel.class, ((Provider) signinViewModelProvider)).put(CheckRegisterViewModel.class, ((Provider) checkRegisterViewModelProvider)).build();
    this.viewModelFactoryProvider = DoubleCheck.provider(ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(DaggerApplication arg0) {
    injectDaggerApplication(arg0);
  }

  @Override
  public void inject(MVVMApplication application) {
    injectMVVMApplication(application);
  }

  @Override
  public Context context() {
    return provideContext$app_debugProvider.get();
  }

  @Override
  public AppDatabase appDatabase() {
    return provideAppDatabase$app_debugProvider.get();
  }

  @Override
  public InteractCommon interactCommon() {
    return provideInteractCommon$app_debugProvider.get();
  }

  @Override
  public Executor schedule() {
    return provideSchedule$app_debugProvider.get();
  }

  private DaggerApplication injectDaggerApplication(DaggerApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  private MVVMApplication injectMVVMApplication(MVVMApplication instance) {
    MVVMApplication_MembersInjector.injectAndroidDispatchingInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(new AppModel(), application);
    }
  }

  private static final class LoginActivitySubcomponentFactory implements ActivityBuilderModule_ContributeLoginActivity.LoginActivitySubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private LoginActivitySubcomponentFactory(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public ActivityBuilderModule_ContributeLoginActivity.LoginActivitySubcomponent create(
        LoginActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new LoginActivitySubcomponentImpl(appComponent, arg0);
    }
  }

  private static final class SplashActivitySubcomponentFactory implements ActivityBuilderModule_ContributeSplashActivity.SplashActivitySubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private SplashActivitySubcomponentFactory(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public ActivityBuilderModule_ContributeSplashActivity.SplashActivitySubcomponent create(
        SplashActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new SplashActivitySubcomponentImpl(appComponent, arg0);
    }
  }

  private static final class HomeAcitivtySubcomponentFactory implements ActivityBuilderModule_ContributeHomeActivity.HomeAcitivtySubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private HomeAcitivtySubcomponentFactory(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public ActivityBuilderModule_ContributeHomeActivity.HomeAcitivtySubcomponent create(
        HomeAcitivty arg0) {
      Preconditions.checkNotNull(arg0);
      return new HomeAcitivtySubcomponentImpl(appComponent, arg0);
    }
  }

  private static final class UserFragmentSubcomponentFactory implements FragmentBuilderModule_ContributeUserFragment.UserFragmentSubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private UserFragmentSubcomponentFactory(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public FragmentBuilderModule_ContributeUserFragment.UserFragmentSubcomponent create(
        UserFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new UserFragmentSubcomponentImpl(appComponent, arg0);
    }
  }

  private static final class SignupFragmentSubcomponentFactory implements FragmentBuilderModule_ContributeSignupFragment.SignupFragmentSubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private SignupFragmentSubcomponentFactory(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public FragmentBuilderModule_ContributeSignupFragment.SignupFragmentSubcomponent create(
        SignupFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new SignupFragmentSubcomponentImpl(appComponent, arg0);
    }
  }

  private static final class SigninFragmentSubcomponentFactory implements FragmentBuilderModule_ContributeSignINFragment.SigninFragmentSubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private SigninFragmentSubcomponentFactory(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public FragmentBuilderModule_ContributeSignINFragment.SigninFragmentSubcomponent create(
        SigninFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new SigninFragmentSubcomponentImpl(appComponent, arg0);
    }
  }

  private static final class CheckRegisterFragmentSubcomponentFactory implements FragmentBuilderModule_ContributeCheckRegisterFragment.CheckRegisterFragmentSubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private CheckRegisterFragmentSubcomponentFactory(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public FragmentBuilderModule_ContributeCheckRegisterFragment.CheckRegisterFragmentSubcomponent create(
        CheckRegisterFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new CheckRegisterFragmentSubcomponentImpl(appComponent, arg0);
    }
  }

  private static final class LoginActivitySubcomponentImpl implements ActivityBuilderModule_ContributeLoginActivity.LoginActivitySubcomponent {
    private final DaggerAppComponent appComponent;

    private final LoginActivitySubcomponentImpl loginActivitySubcomponentImpl = this;

    private LoginActivitySubcomponentImpl(DaggerAppComponent appComponent,
        LoginActivity arg0Param) {
      this.appComponent = appComponent;


    }

    @Override
    public void inject(LoginActivity arg0) {
      injectLoginActivity(arg0);
    }

    private LoginActivity injectLoginActivity(LoginActivity instance) {
      BaseMVVMActivity_MembersInjector.injectFragmentAndroidInjector(instance, appComponent.dispatchingAndroidInjectorOfObject());
      BaseMVVMActivity_MembersInjector.injectViewModelFactory(instance, appComponent.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private static final class SplashActivitySubcomponentImpl implements ActivityBuilderModule_ContributeSplashActivity.SplashActivitySubcomponent {
    private final DaggerAppComponent appComponent;

    private final SplashActivitySubcomponentImpl splashActivitySubcomponentImpl = this;

    private SplashActivitySubcomponentImpl(DaggerAppComponent appComponent,
        SplashActivity arg0Param) {
      this.appComponent = appComponent;


    }

    @Override
    public void inject(SplashActivity arg0) {
      injectSplashActivity(arg0);
    }

    private SplashActivity injectSplashActivity(SplashActivity instance) {
      BaseMVVMActivity_MembersInjector.injectFragmentAndroidInjector(instance, appComponent.dispatchingAndroidInjectorOfObject());
      BaseMVVMActivity_MembersInjector.injectViewModelFactory(instance, appComponent.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private static final class HomeAcitivtySubcomponentImpl implements ActivityBuilderModule_ContributeHomeActivity.HomeAcitivtySubcomponent {
    private final DaggerAppComponent appComponent;

    private final HomeAcitivtySubcomponentImpl homeAcitivtySubcomponentImpl = this;

    private HomeAcitivtySubcomponentImpl(DaggerAppComponent appComponent, HomeAcitivty arg0Param) {
      this.appComponent = appComponent;


    }

    @Override
    public void inject(HomeAcitivty arg0) {
      injectHomeAcitivty(arg0);
    }

    private HomeAcitivty injectHomeAcitivty(HomeAcitivty instance) {
      BaseMVVMActivity_MembersInjector.injectFragmentAndroidInjector(instance, appComponent.dispatchingAndroidInjectorOfObject());
      BaseMVVMActivity_MembersInjector.injectViewModelFactory(instance, appComponent.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private static final class UserFragmentSubcomponentImpl implements FragmentBuilderModule_ContributeUserFragment.UserFragmentSubcomponent {
    private final DaggerAppComponent appComponent;

    private final UserFragmentSubcomponentImpl userFragmentSubcomponentImpl = this;

    private UserFragmentSubcomponentImpl(DaggerAppComponent appComponent, UserFragment arg0Param) {
      this.appComponent = appComponent;


    }

    @Override
    public void inject(UserFragment arg0) {
      injectUserFragment(arg0);
    }

    private UserFragment injectUserFragment(UserFragment instance) {
      BaseMvvmFragment_MembersInjector.injectViewModelFactory(instance, appComponent.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private static final class SignupFragmentSubcomponentImpl implements FragmentBuilderModule_ContributeSignupFragment.SignupFragmentSubcomponent {
    private final DaggerAppComponent appComponent;

    private final SignupFragmentSubcomponentImpl signupFragmentSubcomponentImpl = this;

    private SignupFragmentSubcomponentImpl(DaggerAppComponent appComponent,
        SignupFragment arg0Param) {
      this.appComponent = appComponent;


    }

    @Override
    public void inject(SignupFragment arg0) {
      injectSignupFragment(arg0);
    }

    private SignupFragment injectSignupFragment(SignupFragment instance) {
      BaseMvvmFragment_MembersInjector.injectViewModelFactory(instance, appComponent.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private static final class SigninFragmentSubcomponentImpl implements FragmentBuilderModule_ContributeSignINFragment.SigninFragmentSubcomponent {
    private final DaggerAppComponent appComponent;

    private final SigninFragmentSubcomponentImpl signinFragmentSubcomponentImpl = this;

    private SigninFragmentSubcomponentImpl(DaggerAppComponent appComponent,
        SigninFragment arg0Param) {
      this.appComponent = appComponent;


    }

    @Override
    public void inject(SigninFragment arg0) {
      injectSigninFragment(arg0);
    }

    private SigninFragment injectSigninFragment(SigninFragment instance) {
      BaseMvvmFragment_MembersInjector.injectViewModelFactory(instance, appComponent.viewModelFactoryProvider.get());
      return instance;
    }
  }

  private static final class CheckRegisterFragmentSubcomponentImpl implements FragmentBuilderModule_ContributeCheckRegisterFragment.CheckRegisterFragmentSubcomponent {
    private final DaggerAppComponent appComponent;

    private final CheckRegisterFragmentSubcomponentImpl checkRegisterFragmentSubcomponentImpl = this;

    private CheckRegisterFragmentSubcomponentImpl(DaggerAppComponent appComponent,
        CheckRegisterFragment arg0Param) {
      this.appComponent = appComponent;


    }

    @Override
    public void inject(CheckRegisterFragment arg0) {
      injectCheckRegisterFragment(arg0);
    }

    private CheckRegisterFragment injectCheckRegisterFragment(CheckRegisterFragment instance) {
      BaseMvvmFragment_MembersInjector.injectViewModelFactory(instance, appComponent.viewModelFactoryProvider.get());
      return instance;
    }
  }
}
